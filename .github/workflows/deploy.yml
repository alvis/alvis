name: Deploy to GitHub Pages

on:
  # runs on pushes targeting the default branch
  push:
    branches: ['master']

  # allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# however, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build
  build:
    runs-on: ubuntu-latest
    env:
      BASE_PATH: /alvis
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install Dependencies
        run: pnpm install

      - name: Build with Next.js
        run: pnpm build

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  # Deployment
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
